#!/usr/bin/env python3

import gi
import subprocess
import os
import shutil
import threading
from datetime import datetime, timedelta

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib

class ArchIsoBuilder(Gtk.Window):

    REQUIRED_PACKAGES = [
        'python-gobject', 'gtk3', 'archiso', 'calamares', 
        'git'
    ]

    USER_HOME = os.path.expanduser("~")
    STORMOS_DIR = os.path.join(USER_HOME, "Desktop/stormos-build-files/stormos")
    OUTPUT_DIR = os.path.join(USER_HOME, "Desktop/StormOS-ISO")
    GIT_REPO = "https://github.com/bfitzgit23/stormos-build-files"

    REQUIRED_ITEMS = [
        "packages.x86_64",
        "profiledef.sh",
        "grub",
        "syslinux",
        "efiboot"
    ]

    def __init__(self):
        Gtk.Window.__init__(self, title="StormOS ISO Builder")
        self.set_border_width(10)
        self.set_default_size(600, 500)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        self.add(vbox)

        self.output_scrolled_window = Gtk.ScrolledWindow()
        self.output_scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        vbox.pack_start(self.output_scrolled_window, True, True, 0)

        self.output_textview = Gtk.TextView()
        self.output_textview.set_editable(False)
        self.output_textview.set_cursor_visible(False)
        self.output_scrolled_window.add(self.output_textview)

        self.progress_bar = Gtk.ProgressBar()
        vbox.pack_start(self.progress_bar, False, False, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        vbox.pack_start(hbox, False, False, 0)

        self.use_existing_checkbox = Gtk.CheckButton(label="Use existing git clone")
        hbox.pack_start(self.use_existing_checkbox, False, False, 0)

        self.build_button = Gtk.Button(label="Build ISO")
        self.build_button.connect("clicked", self.on_build_button_clicked)
        hbox.pack_start(self.build_button, False, False, 0)

        self.check_and_install_packages()
        self.scan_stormos_dir()
        self.generate_generic_calamares_config()

    def update_progress(self, fraction, message="", eta=None):
        GLib.idle_add(self.progress_bar.set_fraction, fraction)
        GLib.idle_add(self.progress_bar.set_text, message)

        if eta is not None:
            eta_text = f" - ETA: {eta}"
        else:
            eta_text = ""

        GLib.idle_add(self.set_title, f"StormOS ISO Builder - {int(fraction * 100)}%{eta_text}")

    def check_and_install_packages(self):
        self.update_progress(0.1, "Checking required packages...")
        missing_packages = []
        for package in self.REQUIRED_PACKAGES:
            if not self.is_package_installed(package):
                missing_packages.append(package)

        if missing_packages:
            self.append_text(f"Missing packages: {', '.join(missing_packages)}\n")
            self.install_missing_packages(missing_packages)
        else:
            self.append_text("All required packages are installed.\n")
        self.update_progress(0.2, "Completed checking packages.")

    def is_package_installed(self, package_name):
        result = subprocess.run(['pacman', '-Qq', package_name], capture_output=True, text=True)
        return result.returncode == 0

    def install_missing_packages(self, packages):
        self.append_text(f"Installing missing packages: {', '.join(packages)}\n")
        result = subprocess.run(['sudo', 'pacman', '-S', '--noconfirm'] + packages, capture_output=True, text=True)
        if result.returncode == 0:
            self.append_text(f"Successfully installed: {', '.join(packages)}\n")
        else:
            self.append_text(f"Failed to install: {', '.join(packages)}\n")
            self.append_text(result.stdout)
            self.append_text(result.stderr)

    def clone_or_update_git_repo(self):
        use_existing = self.use_existing_checkbox.get_active()

        if use_existing and os.path.exists(self.STORMOS_DIR):
            self.append_text("Using existing git clone.\n")
            return

        if os.path.exists(self.STORMOS_DIR):
            self.append_text("Existing repository found. Deleting...\n")
            shutil.rmtree(self.STORMOS_DIR)

        self.append_text(f"Cloning repository from {self.GIT_REPO}...\n")
        subprocess.run(['git', 'clone', self.GIT_REPO, self.STORMOS_DIR], check=True)
        self.append_text("Repository cloned successfully.\n")

    def scan_stormos_dir(self):
        self.append_text(f"Scanning {self.STORMOS_DIR} for necessary files and folders...\n")
        found_items = {}

        for root, dirs, files in os.walk(self.STORMOS_DIR):
            for name in files + dirs:
                if name in self.REQUIRED_ITEMS:
                    found_items[name] = os.path.join(root, name)
                    self.append_text(f"Found: {name} at {found_items[name]}\n")

        for required_item in self.REQUIRED_ITEMS:
            if required_item not in found_items:
                self.append_text(f"Missing: {required_item}\n")

    def generate_generic_calamares_config(self):
        self.append_text("Generating generic Calamares configuration...\n")
        
        generic_config = """
---
# Calamares Generic Config
modules:
  - welcome
  - locale
  - keyboard
  - partition
  - users
  - summary
  - finished
"""
        calamares_dir = os.path.join(self.STORMOS_DIR, 'calamares')
        os.makedirs(calamares_dir, exist_ok=True)

        with open(os.path.join(calamares_dir, 'settings.conf'), 'w') as f:
            f.write(generic_config)

        self.append_text("Generic Calamares configuration generated successfully.\n")

    def on_build_button_clicked(self, widget):
        self.append_text("Starting ISO build...\n")
        build_thread = threading.Thread(target=self.build_iso)
        build_thread.start()

    def clean_up_previous_build(self):
        self.append_text("Cleaning up previous build files...\n")

        work_dir = os.path.join(self.OUTPUT_DIR, 'work')
        if os.path.exists(work_dir):
            subprocess.run(['sudo', 'rm', '-rf', work_dir], capture_output=True, text=True)
            self.append_text("Previous work directory cleaned up.\n")

        if os.path.exists(self.OUTPUT_DIR):
            for file_name in os.listdir(self.OUTPUT_DIR):
                if file_name.endswith('.iso'):
                    file_path = os.path.join(self.OUTPUT_DIR, file_name)
                    subprocess.run(['sudo', 'rm', '-f', file_path], capture_output=True, text=True)
                    self.append_text(f"Removed old ISO file: {file_path}\n")

    def build_iso(self):
        try:
            self.clean_up_previous_build()
            self.clone_or_update_git_repo()

            self.update_progress(0.6, "Running mkarchiso...")

            os.makedirs(self.OUTPUT_DIR, exist_ok=True)

            # Updated command to use the correct path
            mkarchiso_command = [
                'sudo', 'mkarchiso', '-v', 
                '-w', f'{self.OUTPUT_DIR}/work', 
                '-o', self.OUTPUT_DIR, 
                os.path.join(self.STORMOS_DIR, 'stormos')  # Updated path
            ]
            result = subprocess.run(mkarchiso_command, capture_output=True, text=True)
            result.check_returncode()

            iso_files = [f for f in os.listdir(self.OUTPUT_DIR) if f.endswith('.iso')]
            if iso_files:
                iso_path = os.path.join(self.OUTPUT_DIR, iso_files[0])
                GLib.idle_add(self.append_text, f"ISO build completed successfully. ISO located at: {iso_path}\n")
            else:
                GLib.idle_add(self.append_text, "ISO build completed, but no ISO file found in the specified output directory.\n")

            self.update_progress(1.0, "ISO build complete")
        except subprocess.CalledProcessError as e:
            GLib.idle_add(self.append_text, f"ISO build failed: {e}\n")
            GLib.idle_add(self.append_text, e.stdout)
            GLib.idle_add(self.append_text, e.stderr)
        except Exception as e:
            GLib.idle_add(self.append_text, f"Unexpected error: {e}\n")
            self.update_progress(1.0, "Build failed")

    def append_text(self, text):
        buffer = self.output_textview.get_buffer()
        buffer.insert_at_cursor(text)
        adj = self.output_scrolled_window.get_vadjustment()
        adj.set_value(adj.get_upper() - adj.get_page_size())

def main():
    win = ArchIsoBuilder()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()

if __name__ == "__main__":
    main()